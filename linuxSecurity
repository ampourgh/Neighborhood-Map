This sudo commands runs it as if we were root
sudo ls -al /home/ubuntu/.ssh

Packaged sources can be found here:
cat /etc/apt/sources.list

To update all repositories, see what all new softwares are available and need updating:
sudo apt-get update

When upgrading, will give you a list and ask if you want to update [Y/n]:
sudo apt-get upgrade

information on the functions:
man apt-get
sudo apt-get autoremove
sudo apt-get install finger <-- finger is a package he wanted to install, can search packages at packages.ubuntu.com

shows a listing of users:
finger
finger vagrant --> shows information on the vagrant user (us)

----
using the following gives a list with users' information, partitioned by ':'
cat /etc/passwd

username:
encrypted passeword ubuntu stores an x in:
user id:
group id:
description:
home directory:
default shell
(e.g., vagrant:x:1000:1000::/home/vagrant:/bin/bash)

---

Create a new user:
sudo adduser student <-- student is the naming example

---

logging into the new user:

ssh as user at this ip address (this computer) with a port of 2222
ssh student@127.0.0.1 -p 2222

---

sudo passwd -e student
sudo cat /etc/passwd

sudo cat /etc/sudoers
sudo cat /etc/sudoers.d <-- files would be included through the directory

Giving the user student power
sudo cp /etc/sudoers.d/vagrant /etc/sudoers.d/student
sudo nano /etc/sudoers.d/student

---

All that is required is that a user is in a sudo group, which you can do after a user has been created with:

sudo usermod -aG sudo grader

---
generating a  key pair
ssh-keygen
/Users/Udacity/.ssh/linuxCourse <-- where key should exist in
>linuxCourse.pub <-- What we'll put on our server

---

mkdir .sh
touch .ssh/authorized_keys <-- make new files within directory

ON LOCAL MACHINE:
cat .ssh/linuxCourse.pub
> copy the output of the command and past it back in the student's
nano .ssh/authorized_keys <--put the information in here
chmod 700 .ssh
chmod 644 .ssh/authorized_keys

ssh student@127.0.0.1 -p 2222 -i ~/.ssh/linuxCourse <-- putting a pass code for key pair

---

Disabling password based logins
sudo nano /etc/ssh/sshd_config
>in output: look for password authentication and set it to no

----

chmod <-- explanation of what this means

ls -al
d <-- stands for directory
- <-- stands for a files
rw- <-- read and write
r-- <-- read only
x <-- stands for execute

OCTAL: r = 4, w = 2, x = 1
Values are added together in octal form

---

sudo chown root .bash_history <-- will deny permission of the following command, only root would be able to read and write the file
cat .bash_history

---
common services on a server and their default port:
http - 80
http - 443
ssh - 22
ftp - 21
pop3 - 110
smtp - 25

---

sudo ufw status
>Status: inactive
sudo ufw default deny incoming <-- activating ubuntu firewall
sudo ufw default allow incoming

sudo ufw allow ssh
sudo ufw allow 2222/tcp
sudo ufw allow www
sudo ufw enable

---

netstat command to find open ports:
netstat --listen OR netstat -l

To display open ports and established TCP connections, enter:
$ netstat -vatn

To display only open UDP ports try the following command:
$ netstat -vaun

If you want to see FQDN (full dns hostname), try removing the -n flag:
$ netstat -vat

---

Logging onto server as root user:
sudo su -

---
To Change the SSH Port for Your Linux Server
1. sudo su -
2. vi /etc/ssh/sshd_config
3. locate this line: # Port 22, remove # and change numbers
4. Restart the sshd service by running the following command: service sshd restart

---

VIM CHEAT SHEET (for editing port # and other information in options menus)

insert before the cursor:
i

insert at the beginning of the line:
I

write (save) the file (but don't exit):
:w

write (save) and quit:
:wq or :x or ZZ

quit (fails if there are unsaved changes):
:q

quit and throw away unsaved changes:
:q! or ZQ

MORE: https://vim.rtorr.com

---

rm -r <mydir>
userdel -r <mynewuser> <-- -r is for deleting all files on the user

---

sudo adduser <username> sudo <-- give user sudo (or admin) powers

---

sudo a2ensite <insert virtual host file name>

sudo a2dissite <insert virtual host file name>

sudo service apache2 reload

---
? 8. Create an SSH key pair for grader using the ssh-keygen tool.

---
10. Install and configure Apache to serve a Python mod_wsgi application.
  If you built your project with Python 3, you will need to install the Python 3 mod_wsgi package on your server: sudo apt-get install libapache2-mod-wsgi-py3.
11. Install and configure PostgreSQL:
  Do not allow remote connections
  Create a new database user named catalog that has limited permissions to your catalog application database.
13. Clone and setup your Item Catalog project from the Github repository you created earlier in this Nanodegree program.
14. Set it up in your server so that it functions correctly when visiting your serverâ€™s IP address in a browser. Make sure that your .git directory is not publicly accessible via a browser!
